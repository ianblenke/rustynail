#![deny(warnings)]

extern crate diesel;
#[macro_use]
extern crate diesel_migrations;

use std::env;
use warp::{http::Uri, Filter};

extern crate pretty_env_logger;
use crypto::digest::Digest;
use crypto::sha2::Sha512;

use rustynail::*;

use db_connection::establish_connection;

//embed_migrations!("migrations");

use crate::db_connection::{ PgPool, PgPooledConnection };

#[tokio::main]
async fn main() {
    //use rustynail::schema::nails::dsl::*;

    if env::var_os("RUST_LOG").is_none() {
        // Set `RUST_LOG=debug` to see debug logs,
        // this only shows access logs.
       env::set_var("RUST_LOG", "info");
    }
    pretty_env_logger::init();

    let connection = establish_connection();

    //let _result = embedded_migrations::run_with_output(&connection, &mut std::io::stdout());

    let hammer = warp::path("hammer")
        .and(warp::path::param())
        .map(|p: String| {
            let mut hasher = Sha512::new();
            hasher.input_str(&p);
            let sha512 = hasher.result_str();
            log::info!("{:?} <- {:?}", sha512, p);
            let _ = create_nail(&pg_pool, &sha512, &p);
            Ok(format!("{}",sha512))
        });

    let hammerhelp = warp::path("hammer")
        .and(warp::path::end())
        .map(|| "This is the rustynail hammer API. Try calling /hammer/{string}");

    let default = warp::any()
        .and(warp::path::end())
        .map(|| warp::redirect(Uri::from_static("/hammer")));

    let routes = warp::get().and(hammer.or(hammerhelp).or(default));

    warp::serve(routes).run(([0, 0, 0, 0], 3030)).await;
}

